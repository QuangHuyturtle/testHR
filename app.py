from flask import Flask, render_template, request, jsonify, flash, redirect, url_for
import pandas as pd
import json
import os
from datetime import datetime
from werkzeug.utils import secure_filename

# Import HR DSS system
from hr_dss_main import HRDecisionSupportSystem

app = Flask(__name__)
app.secret_key = 'hr_dss_demo_key_vietnamese_2025'
app.config['UPLOAD_FOLDER'] = 'uploads/'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024

# Create upload directory
os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)

# Initialize HR system
hr_system = HRDecisionSupportSystem()

@app.route('/')
def index():
    """Trang ch·ªß - Dashboard ch√≠nh"""
    return render_template('index.html')

@app.route('/train', methods=['GET', 'POST'])
def train_model():
    """Hu·∫•n luy·ªán m√¥ h√¨nh"""
    if request.method == 'POST':
        try:
            print("üß† B·∫Øt ƒë·∫ßu qu√° tr√¨nh hu·∫•n luy·ªán...")
            accuracy = hr_system.train_model()
            success_msg = f'üéâ Hu·∫•n luy·ªán m√¥ h√¨nh th√†nh c√¥ng! ƒê·ªô ch√≠nh x√°c: {accuracy:.1%}'
            flash(success_msg, 'success')
            
            return jsonify({
                'success': True, 
                'accuracy': accuracy,
                'message': success_msg,
                'accuracy_percentage': f"{accuracy:.1%}"
            })
        except Exception as e:
            error_msg = f'‚ùå Hu·∫•n luy·ªán th·∫•t b·∫°i: {str(e)}'
            flash(error_msg, 'error')
            print(f"L·ªói hu·∫•n luy·ªán: {e}")
            return jsonify({
                'success': False, 
                'error': str(e),
                'message': error_msg
            })
    
    return render_template('train.html')

@app.route('/predict', methods=['GET', 'POST'])
def predict_single():
    """D·ª± ƒëo√°n cho m·ªôt ·ª©ng vi√™n"""
    if request.method == 'POST':
        try:
            # L·∫•y d·ªØ li·ªáu t·ª´ form
            candidate_data = {
                'candidate_id': request.form.get('candidate_id', '').strip(),
                'years_experience': int(request.form.get('years_experience', 0)),
                'education_level': request.form.get('education_level', ''),
                'skills': request.form.get('skills', '').strip(),
                'experience_description': request.form.get('experience_description', '').strip(),
                'position_applied': request.form.get('position_applied', '').strip()
            }
            
            # Validate d·ªØ li·ªáu
            if not candidate_data['candidate_id']:
                flash('‚ùå Vui l√≤ng nh·∫≠p M√£ ·ª©ng vi√™n', 'error')
                return render_template('predict.html', candidate=candidate_data)
            
            if candidate_data['years_experience'] < 0:
                flash('‚ùå S·ªë nƒÉm kinh nghi·ªám kh√¥ng th·ªÉ √¢m', 'error')
                return render_template('predict.html', candidate=candidate_data)
            
            if not candidate_data['skills']:
                flash('‚ùå Vui l√≤ng nh·∫≠p danh s√°ch k·ªπ nƒÉng', 'error')
                return render_template('predict.html', candidate=candidate_data)
            
            # Th·ª±c hi·ªán d·ª± ƒëo√°n
            print(f"üéØ ƒêang d·ª± ƒëo√°n cho ·ª©ng vi√™n: {candidate_data['candidate_id']}")
            result = hr_system.predict_candidate(candidate_data)
            
            # Th√¥ng b√°o th√†nh c√¥ng
            success_msg = f"‚úÖ D·ª± ƒëo√°n th√†nh c√¥ng cho ·ª©ng vi√™n {result['candidate_id']}: {result.get('prediction_vietnamese', result['prediction'])}"
            flash(success_msg, 'success')
            
            return render_template('predict.html', result=result, candidate=candidate_data)
            
        except ValueError as e:
            error_msg = f'‚ö†Ô∏è L·ªói d·ªØ li·ªáu: {str(e)}'
            flash(error_msg, 'error')
            print(f"Validation error: {e}")
            return render_template('predict.html', candidate=candidate_data)
        except Exception as e:
            error_msg = f'‚ùå D·ª± ƒëo√°n th·∫•t b·∫°i: {str(e)}'
            flash(error_msg, 'error')
            print(f"Prediction error: {e}")
            return render_template('predict.html', error=str(e), candidate=request.form.to_dict())
    
    return render_template('predict.html')

@app.route('/batch', methods=['GET', 'POST'])
def batch_predict():
    """D·ª± ƒëo√°n h√†ng lo·∫°t t·ª´ file CSV"""
    if request.method == 'POST':
        # Ki·ªÉm tra file upload
        if 'file' not in request.files:
            flash('‚ùå Kh√¥ng t√¨m th·∫•y file. Vui l√≤ng ch·ªçn file CSV.', 'error')
            return redirect(request.url)
        
        file = request.files['file']
        if file.filename == '':
            flash('‚ùå Ch∆∞a ch·ªçn file. Vui l√≤ng ch·ªçn file CSV ch·ª©a d·ªØ li·ªáu ·ª©ng vi√™n.', 'error')
            return redirect(request.url)
        
        # Ki·ªÉm tra ƒë·ªãnh d·∫°ng file
        if file and file.filename.lower().endswith('.csv'):
            try:
                # L∆∞u file
                filename = secure_filename(file.filename)
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                safe_filename = f"{timestamp}_{filename}"
                filepath = os.path.join(app.config['UPLOAD_FOLDER'], safe_filename)
                file.save(filepath)
                
                print(f"üìÅ File ƒë√£ l∆∞u: {filepath}")
                
                # X·ª≠ l√Ω d·ª± ƒëo√°n h√†ng lo·∫°t
                print("üë• B·∫Øt ƒë·∫ßu x·ª≠ l√Ω d·ª± ƒëo√°n h√†ng lo·∫°t...")
                results = hr_system.batch_predict(filepath)
                report = hr_system.generate_report(results)
                
                # Th√¥ng b√°o th√†nh c√¥ng
                success_msg = f'üéâ X·ª≠ l√Ω h√†ng lo·∫°t th√†nh c√¥ng! ƒê√£ x·ª≠ l√Ω {len(results)} ·ª©ng vi√™n, trong ƒë√≥ {report["suitable_candidates"]} ·ª©ng vi√™n ph√π h·ª£p.'
                flash(success_msg, 'success')
                
                # X√≥a file t·∫°m
                try:
                    os.remove(filepath)
                except:
                    pass
                
                return render_template('batch_results.html', results=results, report=report)
                
            except Exception as e:
                error_msg = f'‚ùå L·ªói x·ª≠ l√Ω file: {str(e)}'
                flash(error_msg, 'error')
                print(f"Batch processing error: {e}")
        else:
            flash('‚ùå Ch·ªâ ch·∫•p nh·∫≠n file CSV. Vui l√≤ng ch·ªçn file c√≥ ƒëu√¥i .csv', 'error')
    
    return render_template('batch.html')

@app.route('/api/status')
def api_status():
    """API tr·∫°ng th√°i h·ªá th·ªëng"""
    model_loaded = hr_system.model is not None
    
    status = {
        'model_loaded': model_loaded,
        'status': 'S·∫µn s√†ng' if model_loaded else 'C·∫ßn hu·∫•n luy·ªán',
        'status_text': 'M√¥ h√¨nh ƒë√£ s·∫µn s√†ng ƒë·ªÉ d·ª± ƒëo√°n' if model_loaded else 'M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán',
        'timestamp': datetime.now().isoformat(),
        'formatted_time': datetime.now().strftime("%d/%m/%Y %H:%M:%S"),
        'version': '2.0.0',
        'language': 'Ti·∫øng Vi·ªát',
        'features': {
            'single_prediction': True,
            'batch_prediction': True,
            'model_training': True,
            'vietnamese_interface': True
        }
    }
    return jsonify(status)

@app.route('/api/sample-data')
def download_sample_data():
    """T·∫£i xu·ªëng file CSV m·∫´u"""
    try:
        sample_data = """candidate_id,years_experience,education_level,skills,experience_description,position_applied
UV001,5,bachelor,"python, sql, teamwork, communication","C√≥ 5 nƒÉm kinh nghi·ªám ph√°t tri·ªÉn ph·∫ßn m·ªÅm v·ªõi chuy√™n m√¥n v·ªÅ Python v√† SQL",developer
UV002,3,master,"data analysis, machine learning, statistics","Chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu v·ªõi b·∫±ng Th·∫°c sƒ© v√† 3 nƒÉm kinh nghi·ªám",analyst
UV003,8,bachelor,"leadership, project management, agile","Qu·∫£n l√Ω d·ª± √°n c√≥ kinh nghi·ªám v·ªõi 8 nƒÉm trong lƒ©nh v·ª±c c√¥ng ngh·ªá",manager
UV004,2,associate,"excel, communication, teamwork","Nh√¢n vi√™n m·ªõi t·ªët nghi·ªáp cao ƒë·∫≥ng v·ªõi k·ªπ nƒÉng c∆° b·∫£n",coordinator
UV005,10,master,"python, machine learning, leadership, sql","Chuy√™n gia c·∫•p cao v·ªõi 10 nƒÉm kinh nghi·ªám v√† kh·∫£ nƒÉng l√£nh ƒë·∫°o",senior_developer"""
        
        # T·∫°o response v·ªõi file CSV
        from flask import Response
        
        response = Response(
            sample_data,
            mimetype="text/csv",
            headers={"Content-disposition": "attachment; filename=mau_du_lieu_ung_vien.csv"}
        )
        
        flash('üì• File m·∫´u ƒë√£ ƒë∆∞·ª£c t·∫£i xu·ªëng th√†nh c√¥ng!', 'success')
        return response
        
    except Exception as e:
        flash(f'‚ùå L·ªói t·∫£i file m·∫´u: {str(e)}', 'error')
        return redirect(url_for('batch_predict'))

@app.errorhandler(404)
def page_not_found(e):
    """Trang l·ªói 404"""
    return render_template('404.html'), 404

@app.errorhandler(500)
def internal_error(e):
    """Trang l·ªói 500"""
    return render_template('500.html'), 500

@app.context_processor
def inject_datetime():
    """Inject datetime v√†o t·∫•t c·∫£ templates"""
    return {
        'now': datetime.now(),
        'formatted_now': datetime.now().strftime("%d/%m/%Y %H:%M")
    }

if __name__ == '__main__':
    print("=" * 60)
    print("üöÄ KH·ªûI ƒê·ªòNG H·ªÜ TH·ªêNG HR DSS - PHI√äN B·∫¢N TI·∫æNG VI·ªÜT")
    print("=" * 60)
    
    # Ki·ªÉm tra v√† hu·∫•n luy·ªán m√¥ h√¨nh n·∫øu c·∫ßn
    if hr_system.model is None:
        print("‚ö†Ô∏è  M√¥ h√¨nh ch∆∞a ƒë∆∞·ª£c hu·∫•n luy·ªán")
        print("üß† ƒêang kh·ªüi t·∫°o v√† hu·∫•n luy·ªán m√¥ h√¨nh...")
        try:
            accuracy = hr_system.train_model()
            print(f"‚úÖ Hu·∫•n luy·ªán ho√†n t·∫•t! ƒê·ªô ch√≠nh x√°c: {accuracy:.1%}")
        except Exception as e:
            print(f"‚ùå L·ªói hu·∫•n luy·ªán: {e}")
            print("‚ö†Ô∏è  H·ªá th·ªëng s·∫Ω ch·∫°y nh∆∞ng c·∫ßn hu·∫•n luy·ªán m√¥ h√¨nh th·ªß c√¥ng")
    else:
        print("‚úÖ M√¥ h√¨nh ƒë√£ s·∫µn s√†ng!")
    
    print("\nüåê TH√îNG TIN TRUY C·∫¨P:")
    print("üìä Dashboard ch√≠nh:     http://localhost:5000")
    print("üß† Hu·∫•n luy·ªán m√¥ h√¨nh:  http://localhost:5000/train")
    print("üéØ D·ª± ƒëo√°n ƒë∆°n:        http://localhost:5000/predict")  
    print("üë• D·ª± ƒëo√°n h√†ng lo·∫°t:   http://localhost:5000/batch")
    print("‚öôÔ∏è  API tr·∫°ng th√°i:     http://localhost:5000/api/status")
    print("\nüéâ H·ªá th·ªëng ƒë√£ s·∫µn s√†ng! Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng.")
    print("=" * 60)
    
    # Ch·∫°y ·ª©ng d·ª•ng
    app.run(
        debug=True, 
        host='127.0.0.1', 
        port=5000,
        use_reloader=True
    )